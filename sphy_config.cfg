# The Spatial Processes in HYdrology (SPHY) model:
# A spatially distributed hydrological model that calculates soil-water and
# cryosphere processes on a cell-by-cell basis.
#
# Copyright (C) 2013  FutureWater
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Email: info@futurewater.nl

#***********************************************************************************************
# CONFIGURATION FILE BELONGING TO SPHY. MODEL CHANGES CAN BE DONE IN THIS FILE. THIS FILE
# CAN BE USED TO CHANGE MODEL INPUT, SET PARAMETERS, MODEL OUTPUT, AND TURN ON/OFF MODULES
#
# THE SPATIAL PROCESSES IN HYDROLOGY (SPHY) MODEL
# AUTHORS: W. Terink, A. Lutz, G. Simons, W. Immerzeel and P. Droogers
# VERSION 2.2
#***********************************************************************************************

#***********************************************************************************************
# SPHY enables the user to turn/off certain modules. The flags below can be used to turn on/off
# these modules (1=on, 0=off)
#***********************************************************************************************
[MODULES]

# Glacier melt processes module. This automatically turns on the snow module as well.
GlacFLAG    = 1
# Snow module. If the glacier melt processes module is turned on, then this is also turned on
# automatically. If the glacier melt processes module is turned off, then you may turn this on
# if you want to incorporate snow melt and accumulation.
SnowFLAG    = 1
# Routing module. If streamflow routing should be included, then this should be turned on. If
# this is turned on, then the reservoir module should be switched off.
RoutFLAG    = 1
# Lakes module. If lakes are located in your basin, and the Q(h)-relations are known,
# then this can be turned on to implement a more advanced routing scheme.
LakeFLAG    = 0
# Reservoirs module. This module can be used to model reservoir inflow, outflow, and storage. A
# simple or advanced reservoir operation schedule can be selected for each individual reservoir. 
# If this module is turned on, then the routing module should be switched off.
ResFLAG     = 0
# Dynamic vegetation module. This module allows to vary the crop factor (Kc) over the year. This
# can be done by using ndvi values, or by inserting a user defined kc time-series. If this
# module is not used, then the Kc will be constant for each crop.
DynVegFLAG  = 0
# Groundwater module. This distincs between the use of a groundwater reservoir or the use of a
# seepage flux (bottom boundary condition). If the groundwater module is chosen, then percolation
# will occur from the second to third (groundwater) storage, finally resulting in a baseflow flux.
# Otherwise a seepage flux leaves or enters the second storage volume, which eventually results
# in a sub drainage flux.
GroundFLAG  = 1

#***********************************************************************************************
# Define the input and output directories (with /) with respect to the working dir 
# (= dir where *.py is located)
#***********************************************************************************************
[DIRS]

inputdir        = input/
outputdir       = output_test/

#***********************************************************************************************
# Define the start and end of your model simulation period (all values should be defined as 
# integers)
#***********************************************************************************************
[TIMING]

startyear       = 2000
startmonth      = 1
startday        = 1
endyear         = 2003
endmonth        = 12
endday          = 31

#-Start date of first forcing file in directory
startyear_F     = 2000
startmonth_F    = 1
startday_F      = 1

#***********************************************************************************************
# Define general input maps
#***********************************************************************************************
[GENERAL]

# CLONE MAP (boolean map with TRUE for model domain)
mask            = clone.map
# DEM (Digital Elevation Model)
dem             = dem.map
# SLOPE (scalar map with the slope (-))
Slope           = slope.map
# LOCATIONS MAP (nominal map with IDs of locations where time-series will be recorded, e.g. streamflow locations)
locations   = stations.map

#***********************************************************************************************
# Define soil input maps
#***********************************************************************************************
[SOIL]

# FIELD CAPACITY ROOTZONE (scalar map with the field capacity of the rootzone (mm/mm))
RootFieldMap    = root_field.map
# SATURATED WATER CONTENT ROOTZONE (scalar map with the saturated water content of the rootzone (mm/mm))
RootSatMap      = root_sat.map
# PERMANENT WILTING POINT ROOTZONE (scalar map with permanent wilting point rootzone (mm/mm))
RootDryMap      = root_dry.map
# WILTING POINT ROOTZONE (scalar map with wilting point of rootzone (mm/mm))
RootWiltMap     = root_wilt.map
# SATURATED HYDRAULIC CONDUCTIVITY ROOTZONE (scalar map with saturated hydraulic conductivity rootzone (mm/day))
RootKsat        = root_ksat_cal_L_FBGS_647.map
# FIELD CAPACITY SUBSOIL (scalar map with field capacity of the subsoil (mm/mm))
SubFieldMap     = sub_field.map
# SATURATED WATER CONTENT SUBSOIL (scalar map with saturated water content of subsoil (mm/mm))
SubSatMap       = sub_sat.map
# SATURATED HYDRAULIC CONDUCTIVITY SUBSOIL (scalar map with saturated hydraulic conductivity subsoil (mm/day))
SubKsat         = sub_ksat_cal_L_FBGS_647.map

[SOIL_INIT]

# INITIAL ROOTWATER CONTENT (initial rootwater content (mm), if no value is supplied, 
# then RootWater=field capacity rootzone). Can be map or single value.
RootWater       = 
# INITIAL SUBSOIL WATER CONTENT (initial water content in subsoil (mm), if no value is supplied, 
# then SubWater=field capacity subsoil). Can be map or single value.
SubWater        = 
# INITIAL CAPILLARY RISE (initial capillary rise (mm). Can be map or single value.
CapRise         = 0
# INITIAL DRAINAGE ROOTZONE (initial drainage from rootzone (mm)). Can be map or single value.
RootDrain       = 0
# INITIAL DRAINAGE SUBSOIL (initial drainage from the subsoil (mm)). Can be map or single value.
# This can be left empty if the groundwater module is used, because then recharge to the gw will
# be calculated instead.
SubDrain        = 0

#***********************************************************************************************
# Define soil parameters
#***********************************************************************************************
[SOILPARS]

# ROOTZONE DEPTH (thickness of rootzone (mm)). Can be map or single value.
RootDepthFlat   = 400
# SUBSOIL DEPTH (thickness of subsoil (mm)). Can be map or single value.
SubDepthFlat    = 1600
# MAXIMUM ALLOWED CAPILLARY RISE (maximum capillary rise from subsoil to rootzone (mm/day)). Can be map
# or single value.
CapRiseMax      = 0
# SEEPSTATIC. Flag that determines the use of a constant seepage value throughout the entire simulation
# period, or the use of a dynamic seepage map series. Use 1 for static, and 0 for dynamic. If dynamic 
# groundwater module is used, then this can be left empty.
SeepStatic      = 
# SEEPAGE (mm/d) (pos=downwards=outgoing). If groundwater module is used, then this can be left
# empty. Can be map or single value. If SeepStatic flag = 0, then a map time-series should be filled in.
SeePage         = 
# GWL_BASE. Average groundwater level through the year. Can be taken as the average of the highest
# and lowest measured groundwater level. Value should be negative (=depth in m below surface), and can be a map or
# a single value. If groundwater module is used, then this can be left empty.
GWL_base        = 

#***********************************************************************************************
# Define soil parameters for groundwater module. Can be left empty if groundwater module is not
# used
#***********************************************************************************************
[GROUNDW_PARS]

# GROUNDWATER DEPTH (thickness of groundwater layer (mm)). Can be a map or single value.
GwDepth         = 3000
# SATURATED WATER CONTENT GROUNDWATER (saturated water content in groundwater zone (mm)). Can be
# map or single value.
GwSat           = 300
# GROUNDWATER RECHARGE DELAY TIME (delay in groundwater recharge (days)). Can be map or single value.
deltaGw         = 119.697
# BASEFLOW THRESHOLD (minimum value for baseflow to occur (mm)). Can be map or single value.
BaseThresh      = 0
# BASEFLOW DAYS (parameter of baseflow days: alfaGw = 2.3/X (X = nr. of baseflow days). 
# AlfaGw ranges between 0.1-1.0). Can be map or single value.
alphaGw         = 0.051
# SPECIFIC AQUIFER YIELD (m/m). This is the specific yield of the groundwater storage and is used for
# the groundwater table height calculation.
YieldGw         = 0.05

[GROUNDW_INIT]

# INITIAL GROUNDWATER RECHARGE (initial groundwater recharge (mm)). Can be map or single value.
GwRecharge      = 0
# INITIAL BASEFLOW (initial baseflow (mm)). Can be map or single value.
BaseR           = 0
# INITIAL GROUNDWATER STORAGE (initial groundwater storage (mm)). Can be map or single value.
Gw              = 150
# INITIAL GROUNDWATER TABLE HEIGHT (positive value (m)). This is the groundwater table in m below surface.
# This value should be higher than the total depth of the root and subzone depths, and smaller or equal
# to the total depth of the three soil layers (root+sub+gw). Can be map or single value.
H_gw            = 3

#***********************************************************************************************
# Define landuse/crop data. The DYNVEC module has only be filled in if the dynamic vegetation
# module is turned on.
#***********************************************************************************************
[LANDUSE]

# KCSTATIC. Flag that determines the use of a constant kc throughout the entire simulation period,
# or the use of a dynamic kc map series. Use 1 for static, and 0 for dynamic. If dynamic vegetation
# module is used, then this can be left empty.
KCstatic        = 1
# LANDUSE MAP (nominal map with landuse IDs). Can be left empty if KCstatic=0 or if the dynamic vegetation
# module is used.
LandUse         = landuse.map
# CROP COEFFICIENTS (lookup table with crop coefficient (-) for each landuse ID). If the dynamic
# vegetation module is used or the kcstatic value=0, then this lookup table is not required and can
# thus be left empty.
CropFac         = kc.tbl
# CROP COEFFICIENTS MAP SERIES. This one is only used if KCstatic=0 and the dynamic vegetation module
# is not used. Otherwise it can be left empty.
KC              = 

[DYNVEG]

# NDVI. Map series (define without *.map extension) with ndvi.
NDVI        = forcing/ndvi 
# NDVI Max. The maximum ndvi value. Can be a map or single value.
NDVImax     = 0.8
# NDVI Min. The minimum ndvi value. Can be a map or single value.
NDVImin     = 0.2
# NDVI Base. A base value for the ndvi. This value will be used if there is missing data in the ndvi
# image. Can be a map or single value.
NDVIbase    = 0.1
# Kc max. The maximum crop factor. Can be a map or single value.
KCmax       = 1.2
# Kc min. The maximum crop factor. Can be a map or single value.
KCmin       = 0.5
# LAI max. The maximum LAI value. Can be a map or single value.
LAImax      = 6
# FPAR max. The maximum fPAR (Fraction of Absorbed Photosynthetically Active Radiation) value. Can
# be a map or single value.
FPARmax     = 0.95
# FPAR min. The minimum fPAR (Fraction of Absorbed Photosynthetically Active Radiation) value. Can
# be a map or single value.
FPARmin     = 0.001

#***********************************************************************************************
# Define glacier parameters if glacier module is used. Can be left empty if glacier module is
# not used.
#***********************************************************************************************
[GLACIER]

# GLACIER CSV TABLE. This table contains a unique cell id and is based on a uniqe combination of the 
# model grid id and glacier id. Table colums should be: "U_ID, MOD_ID, GLAC_ID, MOD_H, GLAC_H, 
# DEBRIS (1=Yes, 0= Clean Ice), FRAC_GLAC".   
GlacTable       = glac_table_with_iceDepths.csv
# MODEL ID. Nominal map with a unique ID for each model grid cell.
ModelID         = model_id.map
# GLACIER ID. Nominal map with a unique ID for each glacier.
GlacID          = glac_id.map  
# GLACIER (clean ice) DEGREE DAY FACTOR (degree day factor for glacier (mm degree-1 day-1).
# Can be map or single value.
DDFG            = 11
# GLACIER DEBRIS DEGREE DAY FACTOR (degree day factor for glacier (mm degree-1 day-1).
# Can be map or single value.
DDFDG           = 6
# GLACIER MELT FRAC RUNOFF (fraction of glacier melt to become runoff (-)).
# Can be map or single value.
GlacF           = 0.889
# GLACIER RETREAT FLAG (Flag to implement dynamic retreat of glacier, Y=1, N=0). This allows for disappearance
# of glacier fraction if completely melted. If this is used, then last column of GlacTable should contain field "ICE_DEPTH"
GlacRetreat     = 1
# GLACFRAC UPDATE DATE. Day and month in year (d,m, e.g. 30,9 (30 september)) when the glacier fraction should be updated. Is only required when
# glacier retreat flag equals 1.
GlacUpdate      = 30,9

#***********************************************************************************************
# Define snow parameters if snow module is used. This has to be filled in if the glacier
# module is used. If both snow and glacier module are not used, then this can be left empty.
#***********************************************************************************************
[SNOW]

# CRITICAL SNOW TEMPERATURE (critical temperature for precipitation to fall as snow (degrees Celsius)).
# Can be map or single value.
TCrit           = 0
# SNOW PACK CAPACITY (storage capacity of snow pack (mm/mm)).
# Can be map or single value.
SnowSC          = 0.2
# SNOW DEGREE DAY FACTOR (mm degree-1 day-1). Can be map or single value.
DDFS            = 8

[SNOW_INIT]

# INITIAL SNOW STORAG (scalar map with initial snow storage (mm)). Can be map or single value.
SnowIni         = 0
# WATER STORAGE SNOWPACK (initial water stored in snow pack (mm)). Can be map or single value.
SnowWatStore    = 0

#***********************************************************************************************
# Define climate forcing data for model input.
#***********************************************************************************************
[CLIMATE]

# PREC (map series (define without *.map extension) with precipitation (mm))
Prec            = forcing/prec
# TAIR (map series (define without *.map extension) with air temperature (degrees Celsius))
Tair            = forcing_lapsed/tavg
# TLAPSE (table with lapse rates per month to lapse model grid cel temperature to glacier elevation temperature (degrees Celsius/m elevation increase))
TLapse          = Tlapse.tbl

[ETREF]

# ETREF FLAG. If a map time-series exists of the reference evapotranspiration (etref), then this 
# flag can be turned on (1=Y, 0=N). If this is not used, then the etref will be calculated using
# Hargreaves.
ETREF_FLAG      = 0
# ETREF (map series (define without *.map extension) with etref (mm)). Only define if ETREF_FLAG
# = 1. Otherwise can be left empty.
ETref           = 
# LATITUDE ZONES (map with latitude zones required for calculation of extraterrestrial radiation).
# Only define if ETREF_FLAG = 0. Otherwise can be left empty.
Lat             = latitude.map
# SOLAR CONSTANT (MJ/m2/min). Put single float value.
Gsc             = 0.0820
# TMIN (map series (define without *.map extension) with minimum air temperature (degrees Celsius).
# Only define if ETREF_FLAG = 0. Otherwise can be left empty.
Tmin            = forcing_lapsed/tmin
# TMAX (map series (define without *.map extension) with maximum air temperature (degrees Celsius).
# Only define if ETREF_FLAG = 0. Otherwise can be left empty.
Tmax            = forcing_lapsed/tmax

#***********************************************************************************************
# Define routing maps and parameters. This has to be filled in if the routing, lake or reservoir
# module is used.
#***********************************************************************************************
[ROUTING]

# FLOWDIR MAP (local drainage direction based on DEM)
flowdir         = ldd.map
# RECESSION ROUTING COEF (recession coefficient of routing (-)). Can be map or single value.
kx              = 0.945

#***********************************************************************************************
# Define initial routed runoff. This has to be completed if the simple routing module or the
# lake or reservoir modules are used.
#***********************************************************************************************
[ROUT_INIT]

# INITIAL ROUTED TOTAL RUNOFF (m3/s). Can be a map or a single value.
QRA_init        = 0
# FLAG FOR INITIAL ROUTED RAINFALL RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
RainRA_init     = 
# FLAG FOR INITIAL ROUTED BASEFLOW RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
BaseRA_init     = 
# FLAG FOR INITIAL ROUTED SNOW RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
SnowRA_init     = 
# FLAG FOR INITIAL ROUTED GLACIER RUNOFF (m3/s). Can be a map or a single value. If left empty,
# then the routed rainfall rainfall runoff will not be calculated.
GlacRA_init     = 

#***********************************************************************************************
# Define lake maps and parameters. The LAKE module only has to be filled in if
# this module is used. Otherwise it can be left empty.
#***********************************************************************************************
[LAKE]

# LAKE ID MAP. Nominal map with a unique id number specifying each lake in the basin. Zero values for
# non-lake cells
LakeId  = lakeid.map

# USE MEASURED LAKE LEVELS TO CALCULATE THE OUTFLOW (boolean map with true for lakes that have
# measured lake levels, and false for lakes that don't have lake level measurementss). For the 
# latter the level will be calculated given the h(S)-relation.
updatelakelevel = updatelakelevel.map

# LAKE WATER LEVEL FILES (time-series (without *.001 extension) of measured lake levels (m)). 
# Should only contain values for lake locations were lake levels are measured. False (mv) for other locations.
LakeFile        = forcing/level

# LAKE STORAGE LOOKUP TABLE. Create a table file containing initial storage volumes (Mm3) for each
# lake that can be found in the LakeId map. Format should be as shown below. The first line should
# not be in the table file and the # marks should be removed:
# ID    #Stor_init [Mm3]   #RainRA_init [Mm3]   #SnowRA_init [Mm3]   #GlacRA_init [Mm3]   #BaseRA_init [Mm3]
# -99   1                 2                     3                     4                     5
# 1     value1            value2                etc                   etc                   etc
LakeStor = lake_id.tbl

# LAKE FUNCTIONS LOOKUP TABLE. Create a table file with for each lake a function that should be
# used for the Q(h)-, S(h)-, and h(S)-relation. Format should be as shown below. The first line should
# not be in the table file and the # marks should be removed:
# ID    #qh_func (1=exp, 2=1_order poly, 3=2_order poly,4=3_order poly)   #sh_func   #hs_func
# -99   1                                                                 2          3
# 1     value1                                                            value2     etc 
LakeFunc = lake_function.tbl

# QH-PARAMETERS LOOKUP TABLE. Create a table file with for each lake the parameters for the Q(h)-relation,
# depending on the function that should be used (as determined above). Use missing values (1e31) if the
# parameter is inappropriate for the function to be used. Format should be as shown below. The first line
# should not be in the table file and the # marks should be removed:
# ID   #exp_a   #exp_b   #pol_b   #pol_a1   #pol_a2   #pol_a3
# -99  1        2        3        4         5         6 
# 1    value1   value2   1e31     1e31      1e31      1e31
LakeQH = lake_qh.tbl

# SH-PARAMETERS LOOKUP TABLE. Create a table file with for each lake the parameters for the S(h)-relation,
# depending on the function that should be used (as determined above). Use missing values (1e31) if the
# parameter is inappropriate for the function to be used. Format should be as shown below. The first line
# should not be in the table file and the # marks should be removed:
# ID   #exp_a   #exp_b   #pol_b   #pol_a1   #pol_a2   #pol_a3
# -99  1        2        3        4         5         6 
# 1    1e31     1e31     value1   value2    1e31      1e31
LakeSH = lake_sh.tbl

# HS-PARAMETERS LOOKUP TABLE. Create a table file with for each lake the parameters for the h(S)-relation,
# depending on the function that should be used (as determined above). Use missing values (1e31) if the
# parameter is inappropriate for the function to be used. Format should be as shown below. The first line
# should not be in the table file and the # marks should be removed:
# ID   #exp_a   #exp_b   #pol_b   #pol_a1   #pol_a2   #pol_a3
# -99   1        2        3        4         5         6 
# 1     1e31     1e31     value1   value2    value3    1e31
LakeHS = lake_hs.tbl

#***********************************************************************************************
# Define reservoir maps and parameters. The RESERVOIR module only has to be filled in if
# this module is used. Otherwise it can be left empty.
#***********************************************************************************************

[RESERVOIR]

# RESERVOIR ID MAP. Nominal map with a unique id number specifying each reservoir in the basin. Zero values
# for non-reservoir cells
ResId   = resid.map

# RESERVOIR FUNCTION AND STORAGE LOOKUP TABLE. Create a table file containing the reservoir function to be
# used (simple or advanced) and the initial storage volumes (Mm3) for each resservoir that can be found in
# the ResId map. Format should be as shown below. The first line should not be in the table file and 
# the # marks should be removed:
# ID   #Simple or advanced [1,2]   #Stor_init [Mm3]  #RainRA_init [Mm3]    #SnowRA_init [Mm3]    #GlacRA_init [Mm3]    #BaseRA_init [Mm3]
# -99  1                           2                 3                     4                     5                     6
# 1    1                           value1            value2                etc                   etc                   etc
# 6    2                           etc               etc                   etc                   etc                   etc
ResFuncStor = res_id.tbl

# SIMPLE RESERVOIR PARAMETERS. Create a lookup table file containing the parameters to be used for the
# reservoirs that should be modeled as simple reservoir (Hanasaki et al (2006), which are defined in 
# the table shown above. Format should be as shown below. The first line should not be in the table file and 
# the # marks should be removed:
# ID   #Kr     #Smax [Mm3]
# -99  1       2
# 1    value1  value2
# etc  etc     etc
ResSimple = simple_reservoir.tbl

# ADVANCED RESERVOIR PARAMETERS. Create a lookup table file containing the parameters to be used for the
# reservoirs that should be modeled as advanced reservoirs, using a target release, which are defined in 
# the table shown above. Format should be as shown below. The first line should not be in the table file and 
# the # marks should be removed:
# ID   #RES_EVOL [Mm3]   #RES_PVOL [Mm3]   #MAX_FLOW [Mm3/d]   #DEM_FLOW [Mm3/d]   #FLOOD_start [d]   #FLOOD_end [d]
# -99  1                 2                 3                   4                   5                  6
# 6    value1            value2            etc                 etc                 etc                etc
ResAdv = advanced_reservoir.tbl

#***********************************************************************************************
# Define reporting options. SPHY provides output on a daily, monthly and annual basis. Also
# one final map is possible. Below you can modify the reporting for each output. Supply a D for daily
# output, an M for monthly, a Y for yearly, and an F if output at t=end is required. Also a 
# combination is possible, where the values should be separated by a comma; e.g. D,M or Y,D or 
# Y,M or D,M,Y. If no output is desired, then enter NONE after the =. As second parameter enter 
# the desired output file name without extension. Be careful with filename sizes since the output 
# is 8 digits before and three digits after the dot. For time-series 'F' is not an option.
#***********************************************************************************************
[REPORTING]

# FLAG FOR TIME-SERIES CALCULATION AND REPORTING OF FLUXES IN MM FOR THE UPSTREAM AREA (1=Y, 0=N).
# This is mainly interesting if routing is used as well, to check the mm of water generated from the
# upstream areas.
mm_rep_FLAG = 1

############## WATER BALANCE (Can only select daily output) ##################################
wbal_mapoutput         = NONE
wbal_TSoutput          = D
wbal_fname             = wbal
###############################################################################################

############## ONLY FOR LAKE AND/OR RESERVOIR MODULE ##########################################
# FLAG TO REPORT LAKE WATER BALANCE (inflow, outlfow, and storage) (1=Y, 0=N)
Lake_wbal              = 1 
# FLAG TO REPORT RESERVOIR WATER BALANCE (inflow, outlfow, and storage) (1=Y, 0=N)
Res_wbal               = 1
################################################################################################

##################### FLUXES IN MM #############################################################

#####--PRECIPITATION, INTERCEPTION AND EVAPOTRANSPIRATION--#################
# PREC
TotPrec_mapoutput      = NONE
TotPrec_TSoutput       = NONE
TotPrec_fname          = Prec
# EFFECTIVE PRECIPITATION
TotPrecE_mapoutput    = NONE
TotPrecE_TSoutput     = NONE
TotPrecE_fname        = PrecE
# INTERCEPTION
TotInt_mapoutput      = NONE
TotInt_TSoutput       = NONE
TotInt_fname          = Int
# RAIN
TotRain_mapoutput      = NONE
TotRain_TSoutput       = NONE
TotRain_fname          = Rain
# ETPOT
TotETpot_mapoutput     = NONE
TotETpot_TSoutput      = NONE
TotETpot_fname         = ETp
# ETACT
TotETact_mapoutput     = NONE
TotETact_TSoutput      = NONE
TotETact_fname         = ETa

#####--SNOW MODULE REPORTING--#################
# SNOWFALL
TotSnow_mapoutput       = NONE
TotSnow_TSoutput        = NONE
TotSnow_fname           = Snow
# SNOWMELT
TotSnowMelt_mapoutput   = NONE
TotSnowMelt_TSoutput    = NONE
TotSnowMelt_fname       = SMel
# SNOW RUNOFF
TotSnowR_mapoutput     = NONE
TotSnowR_TSoutput      = NONE
TotSnowR_fname         = Snowr

#####--GLACIER MODULE REPORTING--##############
# GLACIER MELT
TotGlacMelt_mapoutput   = NONE
TotGlacMelt_TSoutput    = NONE
TotGlacMelt_fname       = GMel
# GLACIER PERCOLATION
TotGlacPerc_mapoutput  = NONE
TotGlacPerc_TSoutput   = NONE
TotGlacPerc_fname      = Glacp
# GLACIER RUNOFF
TotGlacR_mapoutput     = NONE
TotGlacR_TSoutput      = NONE
TotGlacR_fname         = Glacr
##-Reporting per glacier ID-##
#-Flag to report flux per glacier id (1=Yes, 0=No)
GlacID_flag = 1
#-Mem Error: with many glaciers, long time-series, and many fluxes to report, a memory error may occur. If that's the case, then set GlacID_memerror = 1
GlacID_memerror = 0
#-Glacier fluxes to report per glacier ID (select from comma separated list: 'Prec_GLAC', 'Rain_GLAC', 'Snow_GLAC', 'ActSnowMelt_GLAC', 'SnowStore_GLAC', 'SnowWatStore_GLAC',  'TotalSnowStore_GLAC', 'SnowR_GLAC', 'GlacMelt', 'GlacR', 'GlacPerc', 'FRAC_GLAC', 'ICE_DEPTH')
GlacID_report = Prec_GLAC,Rain_GLAC,Snow_GLAC,ActSnowMelt_GLAC,SnowStore_GLAC,SnowWatStore_GLAC,TotalSnowStore_GLAC,SnowR_GLAC,GlacMelt,GlacR,GlacPerc,FRAC_GLAC,ICE_DEPTH
#####--SOIL WATER FLUXES REPORTING--##############
# ROOTZONE RUNOFF
TotRootR_mapoutput     = NONE
TotRootR_TSoutput      = NONE
TotRootR_fname         = Rootr
# ROOTZONE DRAINAGE
TotRootD_mapoutput     = NONE
TotRootD_TSoutput      = NONE
TotRootD_fname         = Rootd
# RAIN RUNOFF
TotRainR_mapoutput     = NONE
TotRainR_TSoutput      = NONE
TotRainR_fname         = Rainr
# ROOTZONE PERCOLATION
TotRootP_mapoutput     = NONE
TotRootP_TSoutput      = NONE
TotRootP_fname         = Rootp     
# SUBZONE DRAINAGE
TotSubD_mapoutput      = NONE
TotSubD_TSoutput       = NONE
TotSubD_fname          = Subd
# SUBZONE PERCOLATION
TotSubP_mapoutput      = NONE
TotSubP_TSoutput       = NONE
TotSubP_fname          = Subp
# CAPILARY RISE
TotCapR_mapoutput      = NONE
TotCapR_TSoutput       = NONE
TotCapR_fname          = Capr
# SEEPAGE
TotSeep_mapoutput      = NONE
TotSeep_TSoutput       = NONE
TotSeep_fname          = Seep
# GROUNDWATER RECHARGE
TotGwRecharge_mapoutput    = NONE
TotGwRecharge_TSoutput     = NONE
TotGwRecharge_fname        = Gwre
# BASEFLOW RUNOFF
TotBaseR_mapoutput     = NONE
TotBaseR_TSoutput      = NONE
TotBaseR_fname         = Baser
# GROUNDWATER LEVEL in m below surface (Can only select daily output)
GWL_mapoutput           = NONE
GWL_TSoutput            = NONE
GWL_fname               = Gwl
# TOTAL RUNOFF OF ALL FRACTIONS
TotR_mapoutput         = NONE
TotR_TSoutput          = NONE
TotR_fname             = Totr

################### ROUTED FLUXES IN M3/S  (only D option is logical) ####################
# ROUTED RAIN RUNOFF
RainRAtot_mapoutput     = NONE
RainRAtot_TSoutput      = NONE
RainRAtot_fname         = RTot
# ROUTED SNOW RUNOFF
SnowRAtot_mapoutput     = NONE
SnowRAtot_TSoutput      = NONE
SnowRAtot_fname         = STot
# ROUTED GLACIER RUNOFF
GlacRAtot_mapoutput     = NONE
GlacRAtot_TSoutput      = NONE
GlacRAtot_fname         = GTot
# ROUTED BASEFLOW RUNOFF
BaseRAtot_mapoutput     = NONE
BaseRAtot_TSoutput      = NONE
BaseRAtot_fname         = BTot
# ROUTED TOTAL RUNOFF
QallRAtot_mapoutput     = D
QallRAtot_TSoutput      = D
QallRAtot_fname         = QAll
